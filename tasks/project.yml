---
- set_fact:
    project: "{{ outer_project }}"

- name: "Ensure project root: {{ project.root }}"
  file:
    path: "{{ project.root }}"
    follow: yes
    state: directory

- name: "Set project python version: {{ project.root }}"
  template:
    src: ../templates/version.j2
    dest: "{{ project.root }}/.python-version"

- name: "Ensure project virtualenv: {{ project.root }}"
  shell: >
    {{ pyenv_root }}/bin/pyenv virtualenvs --bare --skip-aliases |
    grep '{{ project.version }}/envs/{{ project.name }}-{{ project.version }}'
  changed_when: false
  register: r_virtualenv
  ignore_errors: true

- name: "Create project virtualenv: {{ project.root }}"
  shell: >
    {{ pyenv_root }}/bin/pyenv virtualenv {{ project.version }} {{ project.name }}-{{ project.version }}
  when: r_virtualenv|failed

- name: "Ensure project apt packages: {{ project.root }}"
  become: true
  become_user: root
  apt:
    name: "{{ item }}"
    state: present
    update_cache: true
  with_items: "{{ project.apts | default([]) }}"

- name: "Ensure project requirements: {{ project.root }}/requirements.txt"
  file:
    path: "{{ project.root }}/requirements.txt"
    state: file
  register: r_requrements
  ignore_errors: true

- name: "Install project requirements: {{ project.root }}/requirements.txt"
  pip:
    requirements: "{{ project.root }}/requirements.txt"
    executable: "{{ pyenv_root }}/versions/{{ project.version }}/envs/{{ project.name }}-{{ project.version }}/bin/pip"
  when: r_requrements|succeeded
